// Title: Simulation program for the x^2 regression function with long memory 
// Author: Sepideh Mosaferi
// Date: Nov 2024

new;
library pgraph;
  pqgwin many;

proc( 1 ) =  kreg(y,x,xf,hpower);
local n,m,gam,arg,ker,ghat,denom;
    n = rows(y);  @ rows x & y the same @
    m = rows(xf); @ rows of xf in : mt(xf) = sum{(K(xf-xs)*ys}/sum{K(xf-xs)} @
    gam = 1/n^hpower;
    arg = (xf*ones(1,n)-ones(m,1)*x')/gam;
    ker = pdfn(arg);
    denom = sumc(ker');
    ghat = (ker*y)./sumc(ker');
retp(ghat);
endp;

proc( 1 ) =  kregepan(y,x,xf,hpower);
local n,m,gam,arg,ker,ghat,denom;
    n = rows(y);  @ rows x & y the same @
    m = rows(xf); @ rows of xf in : mt(xf) = sum{(K(xf-xs)*ys}/sum{K(xf-xs)} @
    gam = 1/n^hpower;
    arg = (xf*ones(1,n)-ones(m,1)*x')/gam;
    ker = epan(arg);
    denom = sumc(ker');
    ghat = (ker*y)./sumc(ker');
retp(ghat);
endp;    

proc  ( 1 ) = krdensity(x,xf,hpower);
local n,m,gam,arg,ker,denom;
    n = rows(x);  @ rows x & y the same @
    m = rows(xf); @ rows of xf in : mt(xf) = sum{(K(xf-xs)*ys}/sum{K(xf-xs)} @
    gam = 1/n^hpower;
    arg = (xf*ones(1,n)-ones(m,1)*x')/gam;
    ker = epan(arg);
    denom = sumc(ker');
retp(denom);
endp;

// sigma^2_N estimate
proc ( 1 ) = SIGMA2_N(y,x,xf,hpower);
local n,m,gam,arg,ker,xmat,theta,gxtheta,u,sigma2,T_N;
    n = rows(y);
    m = rows(xf);
    gam = 1/n^hpower;    
    arg = (xf*ones(1,n)-ones(m,1)*x')/gam;
    ker = epan(arg);  
    xmat = zeros(n, 3);
    xmat[.,1]=ones(n,1);
    xmat[.,2]=x;
    xmat[.,3]=x^2;
    theta=pinv(xmat'*xmat)*xmat'*y;
    gxtheta = theta[1]+theta[2]*x+theta[3]*x^2; 
    u = y-gxtheta;
    T_N = ker .* (u'^2);    
    sigma2 = sumc(T_N') ./sumc(ker');
retp(sigma2);
endp;    


// proc to generate LM data by looping [FBM case]

proc dsim(u,d);
/*
** simulate I(d) data
** input  = u
** output = (I-L)^-d u
*/
local nn,y,b0,k,b,ur;
nn= rows(u);
b = zeros(nn,1);
y = zeros(nn,1);
b0=1;          
k =1;
do until k>nn;
   if k==1;
      b[k]=d;
   else;   
      b[k]=(k+d-1)*b[k-1]/k;
   endif;
   k = k+1;
endo;  
b=b0|b;
k =1;
do until k>nn;
   ur   = rev(u[1:k]);   
   y[k] = b[1:k]'ur;
   k = k+1;
endo;   
retp(y);
endp;


/* main program   */
 library gauss, pgraph;
  pqgwin many;


fn epan(r) = 0.75*(1-r^2).*(abs(r) .le 1);
   
   seed1  = 78912342;
   iter   = 2000;             @ # iterations  @
   numh   = {50, 100, 500}; @ sample size selections @
   nm     = 100;            @ number of points of function evaluation @
   
d01 = 0.1;  @ value of d @
d02 = 0.2;
d03 = 0.3;
d04 = 0.4;

aa     = 0.25; 	       @ AR coefficient for equation error AR model @
rho    = 0.5;          @ correlation between ux and uy for endogeneity @ 
b  = 1;            @ regression coefficient @	
sig = 0.2;              @ error standard deviation @
   
hpower  = 1/7;   @ value of bandwidth @

// sample size selection  
nn = numh[3]; 

gghatd01  = zeros(iter,nm+1);
denom_gghatd01 = zeros(iter,nm+1);
SIGMA2fd01 = zeros(iter,nm+1);

gghatd02  = zeros(iter,nm+1);
denom_gghatd02 = zeros(iter,nm+1);
SIGMA2fd02 = zeros(iter,nm+1);

gghatd03  = zeros(iter,nm+1);
denom_gghatd03 = zeros(iter,nm+1);
SIGMA2fd03 = zeros(iter,nm+1);
  
gghatd04  = zeros(iter,nm+1);
denom_gghatd04 = zeros(iter,nm+1);
SIGMA2fd04 = zeros(iter,nm+1);

k = 1;
do until k > iter;            @ loop for simulation @
    ux  = rndns(nn,1,seed1);    // regressor error  
    uy  = rndns(nn,1,seed1);           // equation error
    ux  = ((1-rho^2)^0.5) *ux + rho*uy;  // endogeneity correlation = rho 
    uy  = recserar(uy,uy[1],aa);  @ converts equation error to AR(1) errors @  
    
    uxd01  = dsim(ux,d01);  // generate LM inputs for regressor    
    uxd02  = dsim(ux,d02);    
    uxd03  = dsim(ux,d03);  
    uxd04  = dsim(ux,d04); 
    
    //x and y   
    xd01   = recserar(uxd01,uxd01[1],1);  // regressor is partial sum of LM inputs 
    yxd01 = xd01+xd01^2;
    yd01 = b*yxd01 + sig*uy;                // cointegrated regression equation 
      
    xd02   = recserar(uxd02,uxd02[1],1); 
    yxd02 = xd02+xd02^2;
    yd02 = b*yxd02 + sig*uy;      
      
    xd03   = recserar(uxd03,uxd03[1],1); 
    yxd03 = xd03+xd03^2;
    yd03 = b*yxd03 + sig*uy;                  
 
    xd04   = recserar(uxd04,uxd04[1],1);  
    yxd04 = xd04+xd04^2;
    yd04 = b*yxd04 + sig*uy;  
    
    //raw case [for the comparison] 
    xf  = -1+0.02*seqa(0,1,nm+1); //interval [-1,1]
    yff = xf+xf^2;
    
    //process of calculating terms
    {sigma2Nd01} = SIGMA2_N(yd01,xd01,xf,hpower);      
    {ghatd01} = kregepan(yd01,xd01,xf,hpower);    
    {denom_CId01}  = krdensity(xd01,xf,hpower); 
    
    {sigma2Nd02} = SIGMA2_N(yd02,xd02,xf,hpower);      
    {ghatd02} = kregepan(yd02,xd02,xf,hpower);    
    {denom_CId02} = krdensity(xd02,xf,hpower); 
    
    {sigma2Nd03} = SIGMA2_N(yd03,xd03,xf,hpower);      
    {ghatd03} = kregepan(yd03,xd03,xf,hpower);    
    {denom_CId03} = krdensity(xd03,xf,hpower);
    
    {sigma2Nd04} = SIGMA2_N(yd04,xd04,xf,hpower);      
    {ghatd04} = kregepan(yd04,xd04,xf,hpower);    
    {denom_CId04} = krdensity(xd04,xf,hpower); 
    
    gghatd01[k,.] = ghatd01';
    denom_gghatd01[k,.] = denom_CId01';
    SIGMA2fd01[k,.]= sigma2Nd01';

    gghatd02[k,.] = ghatd02';
    denom_gghatd02[k,.] = denom_CId02';
    SIGMA2fd02[k,.]= sigma2Nd02';

    gghatd03[k,.] = ghatd03';
    denom_gghatd03[k,.] = denom_CId03';
    SIGMA2fd03[k,.]= sigma2Nd03';
    
    gghatd04[k,.] = ghatd04';
    denom_gghatd04[k,.] = denom_CId04';
    SIGMA2fd04[k,.]= sigma2Nd04';
    
    k = k+1;
endo; 

yffrep = zeros(iter,nm+1); 
Expd01rep = zeros(iter,nm+1);   
Expd02rep = zeros(iter,nm+1);  
Expd03rep = zeros(iter,nm+1);  
Expd04rep = zeros(iter,nm+1);  
k = 1;
do until k > iter;  
    yffrep[k,.] = yff';
    Expd01rep[k,.] = meanc(packr(gghatd01))';
    Expd02rep[k,.] = meanc(packr(gghatd02))';
    Expd03rep[k,.] = meanc(packr(gghatd03))';
    Expd04rep[k,.] = meanc(packr(gghatd04))';
    
    k = k+1;
endo;

/*
summary statistics
*/    

biasd01 = meanc(packr(abs(gghatd01-yffrep)));
stdd01 = sqrt(meanc(packr((gghatd01-Expd01rep)^2)));
rmsed01 = sqrt(meanc(packr((gghatd01-yffrep)^2)));
  
CI_upd01 = gghatd01+1.96*sqrt((SIGMA2fd01*0.6) ./ denom_gghatd01); 
CI_lowd01 = gghatd01-1.96*sqrt((SIGMA2fd01*0.6) ./ denom_gghatd01);   
CI_d01 = CI_upd01-CI_lowd01;  

CI_upd01final = meanc(packr(CI_upd01)); 
CI_lowd01final = meanc(packr(CI_lowd01));  
CI_d01final = meanc(packr(CI_d01)); // CI length

coverage_d01 = zeros(iter,nm+1);
k = 1;
do until k > iter; 
    j = 1;
    do until j > (nm+1);
        coverage_d01[k,j] = yffrep[k,j]>CI_lowd01[k,j] and yffrep[k,j]<CI_upd01[k,j];
        j = j+1;
    endo;
    k = k+1;
endo;
coverage_d01final = meanc(packr(coverage_d01));   // coverage probability

biasd02 = meanc(packr(abs(gghatd02-yffrep)));
stdd02 = sqrt(meanc(packr((gghatd02-Expd02rep)^2)));
rmsed02 = sqrt(meanc(packr((gghatd02-yffrep)^2)));
  
CI_upd02 = gghatd02+1.96*sqrt((SIGMA2fd02*0.6) ./ denom_gghatd02); 
CI_lowd02 = gghatd02-1.96*sqrt((SIGMA2fd02*0.6) ./ denom_gghatd02);   
CI_d02 = CI_upd02-CI_lowd02;  

CI_upd02final = meanc(packr(CI_upd02)); 
CI_lowd02final = meanc(packr(CI_lowd02));  
CI_d02final = meanc(packr(CI_d02)); // CI length
 
coverage_d02 = zeros(iter,nm+1);
k = 1;
do until k > iter; 
    j = 1;
    do until j > (nm+1);
        coverage_d02[k,j] = yffrep[k,j]>CI_lowd02[k,j] and yffrep[k,j]<CI_upd02[k,j];
        j = j+1;
    endo;
    k = k+1;
endo;
coverage_d02final = meanc(packr(coverage_d02));   // coverage probability

biasd03 = meanc(packr(abs(gghatd03-yffrep)));
stdd03 = sqrt(meanc(packr((gghatd03-Expd03rep)^2)));
rmsed03 = sqrt(meanc(packr((gghatd03-yffrep)^2)));

CI_upd03 = gghatd03+1.96*sqrt((SIGMA2fd03*0.6) ./ denom_gghatd03); 
CI_lowd03 = gghatd03-1.96*sqrt((SIGMA2fd03*0.6) ./ denom_gghatd03);   
CI_d03 = CI_upd03-CI_lowd03;  

CI_upd03final = meanc(packr(CI_upd03)); 
CI_lowd03final = meanc(packr(CI_lowd03));  
CI_d03final = meanc(packr(CI_d03)); // CI length

coverage_d03 = zeros(iter,nm+1);
k = 1;
do until k > iter; 
    j = 1;
    do until j > (nm+1);
        coverage_d03[k,j] = yffrep[k,j]>CI_lowd03[k,j] and yffrep[k,j]<CI_upd03[k,j];
        j = j+1;
    endo;
    k = k+1;
endo;
coverage_d03final = meanc(packr(coverage_d03));   // coverage probability

biasd04 = meanc(packr(abs(gghatd04-yffrep)));
stdd04 = sqrt(meanc(packr((gghatd04-Expd04rep)^2)));
rmsed04 = sqrt(meanc(packr((gghatd04-yffrep)^2)));

CI_upd04 = gghatd04+1.96*sqrt((SIGMA2fd04*0.6) ./ denom_gghatd04); 
CI_lowd04 = gghatd04-1.96*sqrt((SIGMA2fd04*0.6) ./ denom_gghatd04);   
CI_d04 = CI_upd04-CI_lowd04;  

CI_upd04final = meanc(packr(CI_upd04)); 
CI_lowd04final = meanc(packr(CI_lowd04));  
CI_d04final = meanc(packr(CI_d04)); // CI length

coverage_d04 = zeros(iter,nm+1);
k = 1;
do until k > iter; 
    j = 1;
    do until j > (nm+1);
        coverage_d04[k,j] = yffrep[k,j]>CI_lowd04[k,j] and yffrep[k,j]<CI_upd04[k,j];
        j = j+1;
    endo;
    k = k+1;
endo;
coverage_d04final = meanc(packr(coverage_d04));   // coverage probability
  
// writing the results
Resultd01 = xf~yff~biasd01~stdd01~rmsed01~CI_upd01final~CI_lowd01final~CI_d01final~coverage_d01final;
Resultd02 = xf~yff~biasd02~stdd02~rmsed02~CI_upd02final~CI_lowd02final~CI_d02final~coverage_d02final;
Resultd03 = xf~yff~biasd03~stdd03~rmsed03~CI_upd03final~CI_lowd03final~CI_d03final~coverage_d03final;
Resultd04 = xf~yff~biasd04~stdd04~rmsed04~CI_upd04final~CI_lowd04final~CI_d04final~coverage_d04final;

/*
Save the results 
*/
   
Output file = "/Users/sepidehmosaferi/Desktop/Resultd04.txt" ON; /* this opens the text file to store the results */
Resultd04;
Output off; /* this closes the text file to store the results */  
   

